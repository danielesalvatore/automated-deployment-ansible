# ./ansible/deploy.yml

# load variables
- hosts: webserver

  vars_files:
    - vars/common/main.yml

  become_user: root

  become: yes

  pre_tasks:
    - name: Create SSL certificates folder
      file:
        path: /etc/ssl/dgms.fao.org
        state: directory
        mode: 0755

    - name: Copy SSL .key to folder
      copy:
        src: ./files/ssl/dgms.fao.org.key
        dest: "{{ ssl_key_path }}"
        mode: 0755

    - name: Copy SSL .pem to folder
      copy:
        src: ./files/ssl/dgms.fao.org.pem
        dest: "{{ ssl_pem_path }}"
        mode: 0755

  roles:
    - role: nginx
      nginx_remove_default_vhost: true
      nginx_conf_template: "{{ playbook_dir }}/templates/nginx/nginx.conf.j2"
      nginx_vhosts:
      - listen: "80"
        server_name: "dgms.fao.org www.dgms.fao.org"
        return: "301 https://$server_name$request_uri"
        filename: "dgms.fao.org.80.conf"
      - listen: "443 ssl http2"
        ssl: on;
        server_name: "dgms.fao.org"
        root: "{{frontend_path}}"
        index: "index.php index.html index.htm"
        state: "present"
        template: "{{ nginx_vhost_template }}"
        filename: "dgms.fao.org.conf"
        extra_parameters: |
          ssl_certificate     {{ ssl_pem_path }};
          ssl_certificate_key {{ ssl_key_path }};
          ssl_protocols TLSv1.2;
          ssl_ciphers         HIGH:!aNULL:!MD5;
          ssl_session_timeout 1d;
          ssl_session_cache shared:SSL:50m;
          ssl_session_tickets off;
          ssl_ciphers 'ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256';
          ssl_prefer_server_ciphers on;
          add_header Strict-Transport-Security max-age=15768000;

          location /static {
                alias {{static_assets_path}};
          }
            
          location / {
            alias "{{frontend_path}}";
            index  index.html;
            try_files $uri $uri/ index.html =404; 
          }
            

          # Do not cache sw.js, required for offline-first updates.
          location = sw.js {
              add_header Cache-Control "no-cache";
              proxy_cache_bypass $http_pragma;
              proxy_cache_revalidate on;
              expires off;
              access_log off;
          }

          ##
          # If you want to use Node/Rails/etc. API server
          # on the same port (443) config Nginx as a reverse proxy.
          # For security reasons use a firewall like ufw in Ubuntu
          # and deny port 3000/tcp.
          ##
          location /api {
             proxy_pass http://{{ inventory_hostname }}:3000/api;
             proxy_http_version 1.1;
             proxy_set_header X-Forwarded-Proto https;
             proxy_set_header Upgrade $http_upgrade;
             proxy_set_header Connection 'upgrade';
             proxy_set_header Host $host;
             proxy_cache_bypass $http_upgrade;
          }

  post_tasks:

    - name: Remove previous backup
      file:
        path: "{{frontend_backup_path}}"
        state: absent

    - name: Backup current frontend
      command: "cp -rf {{frontend_path}} {{frontend_backup_path}}"

    - name: Remove current frontend folder
      file:
        path: "{{frontend_path}}"
        state: absent
    
    - name: Deploy frontend
      copy:
        src: "{{build_path}}"
        dest: "{{frontend_path}}"
        mode: 0755
   




